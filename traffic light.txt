import tkinter  as tk


def jls_extract_def():
    return TrafficLight


class TrafficLight(tk.Frame):

    def __init__(self, master=None):

        super().__init__(master)

        self.pack()

        self.create_widgets()

        self.master.geometry('300*600')

        self.master.title('Traffic Lİght')

        self.master.after(1000, self.process)

        self.status = 'green'


    def create_widgets(self):

        self.red_light = tk.Canvas(self, width=150, height=150, bg='red')

        self.yellow_light = tk.Canvas(self, width=150, height=150, bg='cyan')

        self.green_light = tk.Canvas(self, width=150, height=150, bg='cyan')


        self.red_light.pack(pady=(50, 0))

        self.yellow_light.pack()

        self.green_light.pack()


    def process(self):

        if self.status == 'red':

         self.status = 'yellow'

         self.red_light.config(bg='cyan')

         self.yellow_light.config(bg='yellow')

         self.master.after(3*1000, self.process)

        elif self.status == 'yellow':

            self.status = 'green'

            self.yellow_light.config(bg='cyan')

            self.green_light.config(bg='green')

            self.master.after(30*1000, self.process)

        elif self.status == 'green':

         self.status = 'red'

         self.green_light.config(bg='cyan')

         self.red_light.config(bg='red')

         self.master.after(5*1000, self.process)



    if __name__ == '__main__':

        root = tk.Tk()

        app = jls_extract_def()=root)

        app.mainloop()
    
        






























import tkinter  as tk


def jls_extract_def():
    return TrafficLight


class TrafficLight(tk.Frame):

    def __init__(self, master=None):

        super().__init__(master)

        self.pack()

        self.create_widgets()

        self.master.geometry('300*600')

        self.master.title('Traffic Lİght')

        self.master.after(1000, self.process)

        self.status = 'green'


    def create_widgets(self):

        self.red_light = tk.Canvas(self, width=150, height=150, bg='red')

        self.yellow_light = tk.Canvas(self, width=150, height=150, bg='cyan')

        self.green_light = tk.Canvas(self, width=150, height=150, bg='cyan')


        self.red_light.pack(pady=(50, 0))

        self.yellow_light.pack()

        self.green_light.pack()


    def process(self):

        if self.status == 'red':

         self.status = 'yellow'

         self.red_light.config(bg='cyan')

         self.yellow_light.config(bg='yellow')

         self.master.after(3*1000, self.process)

        elif self.status == 'yellow':

            self.status = 'green'

            self.yellow_light.config(bg='cyan')

            self.green_light.config(bg='green')

            self.master.after(30*1000, self.process)

        elif self.status == 'green':

         self.status = 'red'

         self.green_light.config(bg='cyan')

         self.red_light.config(bg='red')

         self.master.after(5*1000, self.process)



    if __name__ == '__main__':

        root = tk.Tk()

        app = jls_extract_def()=root)

        app.mainloop()
    
        



import tkinter  as tk


def jls_extract_def():
    return TrafficLight


class TrafficLight(tk.Frame):

    def __init__(self, master=None):

        super().__init__(master)

        self.pack()

        self.create_widgets()

        self.master.geometry('300*600')

        self.master.title('Traffic Lİght')

        self.master.after(1000, self.process)

        self.status = 'green'


    def create_widgets(self):

        self.red_light = tk.Canvas(self, width=150, height=150, bg='red')

        self.yellow_light = tk.Canvas(self, width=150, height=150, bg='cyan')

        self.green_light = tk.Canvas(self, width=150, height=150, bg='cyan')


        self.red_light.pack(pady=(50, 0))

        self.yellow_light.pack()

        self.green_light.pack()


    def process(self):

        if self.status == 'red':

         self.status = 'yellow'

         self.red_light.config(bg='cyan')

         self.yellow_light.config(bg='yellow')

         self.master.after(3*1000, self.process)

        elif self.status == 'yellow':

            self.status = 'green'

            self.yellow_light.config(bg='cyan')

            self.green_light.config(bg='green')

            self.master.after(30*1000, self.process)

        elif self.status == 'green':

         self.status = 'red'

         self.green_light.config(bg='cyan')

         self.red_light.config(bg='red')

         self.master.after(5*1000, self.process)



    if __name__ == '__main__':

        root = tk.Tk()

        app = jls_extract_def()=root)

        app.mainloop()
    
        



import tkinter  as tk


def jls_extract_def():
    return TrafficLight


class TrafficLight(tk.Frame):

    def __init__(self, master=None):

        super().__init__(master)

        self.pack()

        self.create_widgets()

        self.master.geometry('300*600')

        self.master.title('Traffic Lİght')

        self.master.after(1000, self.process)

        self.status = 'green'


    def create_widgets(self):

        self.red_light = tk.Canvas(self, width=150, height=150, bg='red')

        self.yellow_light = tk.Canvas(self, width=150, height=150, bg='cyan')

        self.green_light = tk.Canvas(self, width=150, height=150, bg='cyan')


        self.red_light.pack(pady=(50, 0))

        self.yellow_light.pack()

        self.green_light.pack()


    def process(self):

        if self.status == 'red':

         self.status = 'yellow'

         self.red_light.config(bg='cyan')

         self.yellow_light.config(bg='yellow')

         self.master.after(3*1000, self.process)

        elif self.status == 'yellow':

            self.status = 'green'

            self.yellow_light.config(bg='cyan')

            self.green_light.config(bg='green')

            self.master.after(30*1000, self.process)

        elif self.status == 'green':

         self.status = 'red'

         self.green_light.config(bg='cyan')

         self.red_light.config(bg='red')

         self.master.after(5*1000, self.process)



    if __name__ == '__main__':

        root = tk.Tk()

        app = jls_extract_def()=root)

        app.mainloop()
    
        




















































































